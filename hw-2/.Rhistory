K <- c(5, 10, 20, 50, 100)
N <- c(2*K, 4*K, 5*K, 6*K, 8*K, 10*K)
p_mat = matrix(NA, nrow=length(K), ncol = length(N))
for (i in 1:length(K)) {
for (j in 1:length(N)) {
p_vals <- vector("numeric", 10000)
for (k in 1:10000) {
x <- sample(1:K[i], N[j], replace=TRUE)
p <- chisq.test(table(x))
p_vals[k] = p$p.value
}
p_mat[i, j] = mean(p_vals)
}
}
p_mat
?quantile
data <- rnorm(10000, 0, 1)
quantile(data, type=1)
library(ggplot2)
quantile(data, type=1)
ggplot(quantile(data, type=1))
plot(quantile(data, type=1))
plot(quantile(data, type=3))
quantile(data, type=1)
plot(quantile(data, type=1))
quantile(data, type=3)
plot(quantile(data, type=3))
quantile(data, type=4)
plot(quantile(data, type=4))
```{r plot 3, echo=TRUE}
quantile(data, type=5)
plot(quantile(data, type=4))
```{r plot 4, echo=TRUE}
plot(quantile(data, type=5))
```{r quantile 5, echo=TRUE}
quantile(data, type=6)
plot(quantile(data, type=6))
uniform.test <- function(x, B=10000) {
a = min(x)
b = max(x)
D_0 = b - a
tests = vector("numeric", B)
for (b in 1:B) {
sample_dist = sample(x, replace=TRUE)
a_b = min(sample_dist)
b_b = max(sample_dist)
D_b = b_b - a_b
tests[b] = D_b
}
p_value = (as.integer(tests >= D_0) + 1)/(B + 1)
return p_value
uniform.test <- function(x, B=10000) {
a = min(x)
b = max(x)
D_0 = b - a
tests = vector("numeric", B)
for (b in 1:B) {
sample_dist = sample(x, replace=TRUE)
a_b = min(sample_dist)
b_b = max(sample_dist)
D_b = b_b - a_b
tests[b] = D_b
}
p_value = (as.integer(tests >= D_0) + 1)/(B + 1)
return(p_value)
}
K <- c(5, 10, 20, 50, 100)
N <- c(2*K, 4*K, 5*K, 6*K, 8*K, 10*K)
p_mat = matrix(NA, nrow=length(K), ncol = length(N))
for (i in 1:length(K)) {
for (j in 1:length(N)) {
p_vals <- vector("numeric", 10000)
for (k in 1:10000) {
x <- sample(1:K[i], N[j], replace=TRUE)
p <- chisq.test(table(x))
p_vals[k] = p$p.value
}
p_mat[i, j] = mean(p_vals)
}
}
p_mat
K <- c(5, 10, 20, 50, 100)
N <- c(2*K, 4*K, 5*K, 6*K, 8*K, 10*K)
p_mat = matrix(NA, nrow=length(K), ncol = length(N))
for (i in 1:length(K)) {
for (j in 1:length(N)) {
p_vals <- vector("numeric", 10000)
for (k in 1:10000) {
x <- sample(1:K[i], N[j], replace=TRUE)
p <- chisq.test(x)
p_vals[k] = p$p.value
}
p_mat[i, j] = mean(p_vals)
}
}
p_mat
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(rmarkdown)
render("hw-2.Rmd")
render("hw-2.Rmd")
