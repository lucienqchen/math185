df <- read_csv(cars.csv)
df <- read.csv(cars.csv)
df <- read.csv("cars.csv")
head(df)
library(reader)
library(readr)
library(dplyr)
library(ggplot2)
df <- read_csv("cars.csv")
head(df)
library(readr)
library(dplyr)
library(ggplot2)
df <- read.csv("cars.csv")
head(df)
head(df)
df %>% group_by(Engine.Information.Driveline) %>%
df %>% group_by(Engine.Information.Driveline)
p <- df %>% ggplot() + aes(factor(Engine.Information.Driveline), Fuel.Information.City.mpg)
p + geom_violin()
p <- df %>% ggplot() + aes(factor(Engine.Information.Driveline), Fuel.Information.City.mpg, color=Engine.Information.Driveline)
p <- df %>% ggplot() + aes(factor(Engine.Information.Driveline), Fuel.Information.City.mpg, color=Engine.Information.Driveline)
p + geom_violin()
p <- df %>% ggplot() + aes(Engine.Information.Driveline, Fuel.Information.City.mpg, color=Engine.Information.Driveline)
p <- df %>% ggplot() + aes(Engine.Information.Driveline, Fuel.Information.City.mpg, color=Engine.Information.Driveline)
p + geom_violin()
p <- df %>% ggplot() + aes(Engine.Information.Driveline, Fuel.Information.City.mpg, color=Engine.Information.Driveline)
p + geom_violin()
df %>% unique(Engine.Information.Transmission)
df$Engine.Information.Transmission %>% unique()
?grepl
df %>% mutate(
transmission = if_else(
grepl("Manual", df$Engine.Information.Transmission, fixed=TRUE),
"Manual",
"Automatic"
)
)
df$Identification.Classification %>% unique()
?f.test
?aov
?t.test
?pairwise.t.test
?aov
aov(Fuel.Information.City.mpg ~ Engine.Information.Driveline, data=df)
test <- aov(Fuel.Information.City.mpg ~ Engine.Information.Driveline, data=df)
summary(test)
head(df)
p <- df %>% ggplot() + aes(Identification.Classification, Fuel.Information.City.mpg, color=Identification.Classification) + geom_boxplot()
p
p <- df %>% ggplot() + aes(Identification.Classification, Fuel.Information.City.mpg, color=Identification.Classification) + geom_boxplot()
p
?t.test
?t_test
head(df)
t.test(Fuel.Information.City.mpg ~ Identification.Classification)
t.test(Fuel.Information.City.mpg ~ Identification.Classification, data=df)
t.test(Fuel.Information.City.mpg ~ Identification.Classification, data=df)$p.value
t.test(Fuel.Information.City.mpg ~ Identification.Classification, data=df)$statistic
compute_t <- function(data) {
t <- t.test(Fuel.Information.City.mpg ~ Identification.Classification, data=data)$statistic
return(t)
}
obs_t <- compute_t(df)
obs_t
compute_t <- function(data) {
t <- t.test(Fuel.Information.City.mpg ~ Identification.Classification, data=data)$statistic
return(t)
}
obs_t <- compute_t(df)
n <- 1000
permutations <- numeric(n)
for (i in 1:n) {
permutation_data <- df
permutation_data$Fuel.Information.City.mpg <- sample(df$Fuel.Information.City.mpg)
permutations[i] <- compute_t(permutation_data)
}
p_value <- mean(abs(permutations) >= obs_t)
p_value
compute_t <- function(data) {
t <- t.test(Fuel.Information.City.mpg ~ Identification.Classification, data=data)$statistic
return(t)
}
obs_t <- compute_t(df)
n <- 1000
permutations <- numeric(n)
for (i in 1:n) {
permutation_data <- df
permutation_data$Fuel.Information.City.mpg <- sample(df$Fuel.Information.City.mpg)
permutations[i] <- compute_t(permutation_data)
}
p_value <- mean(abs(permutations) >= abs(obs_t))
p_value
M = 1e4
M
M = 1e4
g <- sample(3:10, 1)
g
M <- 1e4
g <- sample(3:10, 1)
n <- 100
data <- data.frame(
group = rep(1:g, each=n),
data = c(rnorm(1, 1), replicate(g-1, rnorm(0, 1)))
)
M <- 1e4
g <- sample(3:10, 1)
n <- 100
data <- data.frame(
group = rep(1:g, each=n),
data = c(rnorm(1, 1, n), replicate(g-1, rnorm(0, 1, n)))
)
?rnorm
M <- 1e4
g <- sample(3:10, 1)
n <- 100
data <- data.frame(
group = rep(1:g, each=n),
data = c(rnorm(n, 1, 1), replicate(g-1, rnorm(n, 0, 1)))
)
data
?welch.test
?oneway.test
pairwise.t.test
?pairwise.t.test
M <- 1e4
n <- 100
simulate_power <- function(mu, alpha) {
f_rejects <- numeric(M)
pair_rejects <- numeric(M)
for (i in 1:M) {
data <- data.frame(
group = rep(1:g, each = n),
value = c(rnorm, n, mu, 1), replicate(g-1, rnorm(n, 0, 1))
)
f_test <- oneway.test(value ~ group, data=data, var.equal=F)
pair_test <- pairwise.t.test(data$value, data$group, p.adjust.method="holm", pool.sd=F)
f_rejects[i] = f_test$p.value < alpha
pair_rejects[i] = any(pair_test$p.value < alpha)
}
return(list(power_f = mean(f_rejects), power_pair = mean(pair_rejects)))
}
mus <- seq(0, 2, length.out=10)
G <- 3:10
res <- list()
for (g in G) {
powers <- sapply(mus, function(mu) {simulate_power(mu, alpha=0.10)})
res[[as.character(g)]] <- data.frame(
mu = mus,
power_f = powers[1, ],
power_pair = powers[2, ]
)
}
list()
?list
M <- 1e4
n <- 100
simulate_power <- function(mu, alpha) {
f_rejects <- numeric(M)
pair_rejects <- numeric(M)
for (i in 1:M) {
data <- data.frame(
group = rep(1:g, each = n),
value = c(rnorm, n, mu, 1), replicate(g-1, rnorm(n, 0, 1))
)
f_test <- oneway.test(value ~ group, data=data, var.equal=F)
pair_test <- pairwise.t.test(data$value, data$group, p.adjust.method="holm", pool.sd=F)
f_rejects[i] = f_test$p.value < alpha
pair_rejects[i] = any(pair_test$p.value < alpha)
}
return(list(power_f = mean(f_rejects), power_pair = mean(pair_rejects)))
}
mus <- seq(0, 2, length.out=10)
G <- 3:10
res <- list()
for (g in G) {
powers <- sapply(mus, function(mu) {
simulate_power(mu, alpha=0.10)
}
)
res[[as.character(g)]] <- data.frame(
mu = mus,
power_f = powers[1, ],
power_pair = powers[2, ]
)
}
simulate_power(mu, alpha=0.10)
M <- 1e4
n <- 100
simulate_power <- function(mu, alpha) {
f_rejects <- numeric(M)
pair_rejects <- numeric(M)
for (i in 1:M) {
data <- data.frame(
group = rep(1:g, each = n),
value = c(rnorm, n, mu, 1), replicate(g-1, rnorm(n, 0, 1))
)
f_test <- oneway.test(value ~ group, data=data, var.equal=F)
pair_test <- pairwise.t.test(data$value, data$group, p.adjust.method="holm", pool.sd=F)
f_rejects[i] = f_test$p.value < alpha
pair_rejects[i] = any(pair_test$p.value < alpha)
}
return(list(power_f = mean(f_rejects), power_pair = mean(pair_rejects)))
}
mus <- seq(0, 2, length.out=10)
G <- 3:10
res <- vector(mode="list")
for (g in G) {
powers <- sapply(mus, function(mu) {
simulate_power(mu, alpha=0.10)
}
)
res[[as.character(g)]] <- data.frame(
mu = mus,
power_f = powers[1, ],
power_pair = powers[2, ]
)
}
M <- 1e4
n <- 100
simulate_power <- function(mu, alpha) {
f_rejects <- numeric(M)
pair_rejects <- numeric(M)
for (i in 1:M) {
data <- data.frame(
group = rep(1:g, each = n),
value = c(rnorm, n, mu, 1), replicate(g-1, rnorm(n, 0, 1))
)
f_test <- oneway.test(value ~ group, data=data, var.equal=F)
pair_test <- pairwise.t.test(data$value, data$group, p.adjust.method="holm", pool.sd=F)
f_rejects[i] = f_test$p.value < alpha
pair_rejects[i] = any(pair_test$p.value < alpha)
}
return(list(power_f = mean(f_rejects), power_pair = mean(pair_rejects)))
}
mus <- seq(0, 2, length.out=10)
G <- 3:10
res <- vector(mode="list")
for (g in G) {
powers <- lapply(mus, function(mu) {
simulate_power(mu, alpha=0.10)
}
)
res[[as.character(g)]] <- data.frame(
mu = mus,
power_f = powers[1, ],
power_pair = powers[2, ]
)
}
?replicate
powers <- lapply(mus, function(mu) {
simulate_power(mu, alpha=0.10)
}
)
simulate_power <- function(mu, alpha) {
f_rejects <- numeric(M)
pair_rejects <- numeric(M)
for (i in 1:M) {
data <- data.frame(
group = rep(1:g, each = n),
value = c(rnorm, n, mu, 1), replicate(g-1, rnorm(n, 0, 1))
)
f_test <- oneway.test(value ~ group, data=data, var.equal=F)
pair_test <- pairwise.t.test(data$value, data$group, p.adjust.method="holm", pool.sd=F)
f_rejects[i] = f_test$p.value < alpha
pair_rejects[i] = any(pair_test$p.value < alpha)
}
return(list(power_f = mean(f_rejects), power_pair = mean(pair_rejects)))
}
simulate_power(1, 0.1)
M <- 1e4
n <- 100
simulate_power <- function(mu, alpha) {
f_rejects <- numeric(M)
pair_rejects <- numeric(M)
for (i in 1:M) {
data <- data.frame(
group = rep(1:g, each = n),
value = c(rnorm, n, mu, 1), replicate(g-1, rnorm(n, 0, 1)))
)
M <- 1e4
n <- 100
simulate_power <- function(mu, alpha) {
f_rejects <- numeric(M)
pair_rejects <- numeric(M)
for (i in 1:M) {
data <- data.frame(
group = rep(1:g, each = n),
value = c(rnorm(n, mu, 1), replicate(g-1, rnorm(n, 0, 1)))
)
f_test <- oneway.test(value ~ group, data=data, var.equal=F)
pair_test <- pairwise.t.test(data$value, data$group, p.adjust.method="holm", pool.sd=F)
f_rejects[i] = f_test$p.value < alpha
pair_rejects[i] = any(pair_test$p.value < alpha)
}
return(list(power_f = mean(f_rejects), power_pair = mean(pair_rejects)))
}
mus <- seq(0, 2, length.out=10)
G <- 3:10
res <- vector(mode="list")
for (g in G) {
powers <- lapply(mus, function(mu) {
simulate_power(mu, alpha=0.10)
}
)
res[[as.character(g)]] <- data.frame(
mu = mus,
power_f = powers[1, ],
power_pair = powers[2, ]
)
}
powers
powers[1, ]
powers[1,]
powers
powers[power_f, ]
power[, 1]
power[:, 1]
powers[:, 1]
powers[1]
powers[1, 1]
dim(powers[1])
powers[1]
powers[1, [1]]
powers[1, 1]
powers[1, 1, 1]
powers[1][1]
powers[1][1, 1]
powers[1][1]
powers[1][2]
powers[1]
length(powers[1])
type(powers[1])
powers[1]$power_pair
powers[1]
sapply(powers, function(x) x$power_f)
M <- 1e4
n <- 100
simulate_power <- function(mu, alpha) {
f_rejects <- numeric(M)
pair_rejects <- numeric(M)
for (i in 1:M) {
data <- data.frame(
group = rep(1:g, each = n),
value = c(rnorm(n, mu, 1), replicate(g-1, rnorm(n, 0, 1)))
)
f_test <- oneway.test(value ~ group, data=data, var.equal=F)
pair_test <- pairwise.t.test(data$value, data$group, p.adjust.method="holm", pool.sd=F)
f_rejects[i] = f_test$p.value < alpha
pair_rejects[i] = any(pair_test$p.value < alpha, na.rm=T)
}
return(list(power_f = mean(f_rejects), power_pair = mean(pair_rejects)))
}
mus <- seq(0, 2, length.out=10)
G <- 3:10
res <- vector(mode="list")
for (g in G) {
powers <- lapply(mus, function(mu) {
simulate_power(mu, alpha=0.10)
}
)
res[[as.character(g)]] <- data.frame(
mu = mus,
power_f = sapply(powers, function(x) {x$power_f}),
power_pair = sapply(powers, function(x) {x$power_pair})
)
}
plots <- lapply(names(res), function(g) {
data <- res[[g]]
ggplot(data, aes(x=mu)) + geom_line(aes(y=power_f, color="Welch F-test"))
+ geom_line(aes(y=power_pair, color="Pairwise Welch t-test with Holm's Correction")) + labs(title = paste("Power Comparison for g=", g))
})
plots <- lapply(names(res), function(g) {
data <- res[[g]]
ggplot(data, aes(x=mu)) + geom_line(aes(y=power_f, color="Welch F-test")) + geom_line(aes(y=power_pair, color="Pairwise Welch t-test with Holm's Correction")) + labs(title = paste("Power Comparison for g=", g))
})
plots
library(rmarkdown)
render("hw-4.Rmd")
