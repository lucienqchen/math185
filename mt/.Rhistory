for (mu in Mu) {
x <- rnorm(n, mu, sigma)
T <- t.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)$p.value
D <- wilcox.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)$p.value
reject <- vector(c(T, D)) <= alpha
return(reject)
}
}
}
powers <- replicate(n=B, test_power())
N <- c(10, 20, 50, 100, 200, 500)
B <- 1e4
Mu <- seq(-2, 2, length.out=11)
sigma <- 1
alpha <- 0.1
test_power <- function() {
for (n in N) {
for (mu in Mu) {
x <- rnorm(n, mu, sigma)
T <- t.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)$p.value
D <- wilcox.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)$p.value
reject <- c(T, D) <= alpha
return(reject)
}
}
}
powers <- replicate(n=B, test_power())
powers[::2]
mean(powers)
N <- c(10, 20, 50, 100, 200, 500)
B <- 1e4
Mu <- seq(-2, 2, length.out=11)
sigma <- 1
alpha <- 0.1
test_power <- function() {
for (n in N) {
for (mu in Mu) {
x <- rnorm(n, mu, sigma)
T <- t.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)$p.value
D <- wilcox.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)$p.value
reject <- c(T, D)
return(reject)
}
}
}
powers <- replicate(n=B, test_power())
hist(powers)
Mu
?list
list(1, 0)
list(1, 0)[1]
?plot
?lines
?legend
N <- c(10, 20, 50, 100, 200, 500)
B <- 1e4
Mu <- seq(-2, 2, length.out=11)
sigma <- 1
alpha <- 0.1
simulate <- function(n, mu) {
t_rejects <- numeric(B)
signed_rank_rejects <- numeric(B)
for (b in 1:B) {
x <- rnorm(n, mu, sigma)
T <- t.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)
D <- wilcox.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)
t_rejects[i] = T$p.value < alpha
signed_rank_rejects[i] = D$p.value < alpha
}
t_power <- mean(t_rejects)
signed_rank_power <- mean(signed_rank_rejects)
return(list(t_power, signed_rank_power))
}
for (n in N) {
t_powers <- numeric(length(Mu))
signed_rank_powers <- numeric(length(Mu))
for (i in 1:length(Mu)) {
mu <- Mu[i]
sim <- simulate(n, mu)
t_powers[i] = sims[1]
signed_rank_powers[i] = sims[2]
}
plot(Mu, t_powers, type="l", col="blue", xlab = "mu's", ylab="Power")
lines(Mu, signed_rank_powers, col="orange")
legend("topright", legend=c("t-test", "signed-rank-test"), col=c("blue", "orange"), lty=1)
}
N <- c(10, 20, 50, 100, 200, 500)
B <- 1e4
Mu <- seq(-2, 2, length.out=11)
sigma <- 1
alpha <- 0.1
simulate <- function(n, mu) {
t_rejects <- numeric(B)
signed_rank_rejects <- numeric(B)
for (b in 1:B) {
x <- rnorm(n, mu, sigma)
T <- t.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)
D <- wilcox.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)
t_rejects[i] = T$p.value < alpha
signed_rank_rejects[i] = D$p.value < alpha
}
t_power <- mean(t_rejects)
signed_rank_power <- mean(signed_rank_rejects)
return(list(t_power, signed_rank_power))
}
for (n in N) {
t_powers <- numeric(length(Mu))
signed_rank_powers <- numeric(length(Mu))
for (i in 1:length(Mu)) {
mu <- Mu[i]
sim <- simulate(n, mu)
t_powers[i] = sim[1]
signed_rank_powers[i] = sim[2]
}
plot(Mu, t_powers, type="l", col="blue", xlab = "mu's", ylab="Power")
lines(Mu, signed_rank_powers, col="orange")
legend("topright", legend=c("t-test", "signed-rank-test"), col=c("blue", "orange"), lty=1)
}
# Define parameters
n_values <- c(10, 20, 50, 100, 200, 500)
mu_grid <- seq(-5, 5, length.out = 10)  # Grid of mu values
alpha <- 0.1  # Significance level
B <- 10^4  # Number of simulations
# Function to perform simulations for a given n and mu
simulate <- function(n, mu) {
t_rejects <- 0
signed_rank_rejects <- 0
for (i in 1:B) {
# Generate samples from normal distribution
samples <- rnorm(n, mean = mu, sd = 1)
# Perform t-test
t_result <- t.test(samples, mu = 0)
if (t_result$p.value < alpha) {
t_rejects <- t_rejects + 1
}
# Perform signed-rank test
signed_rank_result <- wilcox.test(samples, mu = 0)
if (signed_rank_result$p.value < alpha) {
signed_rank_rejects <- signed_rank_rejects + 1
}
}
# Compute rejection fractions
t_power <- t_rejects / B
signed_rank_power <- signed_rank_rejects / B
return(c(t_power, signed_rank_power))
}
# Generate power curves for each value of n
for (n in n_values) {
t_powers <- numeric(length(mu_grid))
signed_rank_powers <- numeric(length(mu_grid))
for (i in 1:length(mu_grid)) {
mu <- mu_grid[i]
powers <- simulate(n, mu)
t_powers[i] <- powers[1]
signed_rank_powers[i] <- powers[2]
}
# Plot power curves
plot(mu_grid, t_powers, type = "l", col = "blue", xlab = "μ", ylab = "Power",
main = paste("Power Comparison (α =", alpha, ") for n =", n))
lines(mu_grid, signed_rank_powers, col = "red")
legend("topright", legend = c("t-test", "Signed-rank test"), col = c("blue", "red"), lty = 1)
}
t_rejects
N <- c(10, 20, 50, 100, 200, 500)
B <- 1e4
Mu <- seq(-3, 3, length.out=10)
sigma <- 1
alpha <- 0.1
simulate <- function(n, mu) {
t_rejects <- numeric(B)
signed_rank_rejects <- numeric(B)
for (b in 1:B) {
x <- rnorm(n, mu, sigma)
T <- t.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)
D <- wilcox.test(x, alternative="two.sided", mu=0, conf.level=1-alpha)
t_rejects[i] = as.integer(T$p.value < alpha)
signed_rank_rejects[i] = as.integer(D$p.value < alpha)
}
t_power <- mean(t_rejects)
signed_rank_power <- mean(signed_rank_rejects)
return(c(t_power, signed_rank_power))
}
for (n in N) {
t_powers <- numeric(length(Mu))
signed_rank_powers <- numeric(length(Mu))
for (i in 1:length(Mu)) {
mu <- Mu[i]
sim <- simulate(n, mu)
t_powers[i] = sim[1]
signed_rank_powers[i] = sim[2]
}
plot(Mu, t_powers, type="l", col="blue", xlab = "mu's", ylab="Power",
main=paste("Power Comparison for n = ", n))
lines(Mu, signed_rank_powers, col="orange")
legend("topright", legend=c("t-test", "signed-rank-test"), col=c("blue", "orange"), lty=1)
}
N <- c(10, 20, 50, 100, 200, 500)
B <- 1e4
Mu <- seq(-3, 3, length.out=10)
sigma <- 1
alpha <- 0.1
simulate <- function(n, mu) {
t_rejects <- 0
signed_rank_rejects <- 0
for (b in 1:B) {
x <- rnorm(n, mean=mu, sd=sigma)
T <- t.test(x, alternative="two.sided", mu=0)
D <- wilcox.test(x, alternative="two.sided", mu=0)
if (T$p.value < alpha) {
t_rejects <- t_rejects + 1
}
if (D$p.value < alpha) {
signed_rank_rejects <- signed_rank_rejects + 1
}
}
t_power <- t_rejects / B
signed_rank_power <- signed_rank_rejects / B
return(c(t_power, signed_rank_power))
}
for (n in N) {
t_powers <- numeric(length(Mu))
signed_rank_powers <- numeric(length(Mu))
for (i in 1:length(Mu)) {
mu <- Mu[i]
sim <- simulate(n, mu)
t_powers[i] = sim[1]
signed_rank_powers[i] = sim[2]
}
plot(Mu, t_powers, type="l", col="blue", xlab = "mu's", ylab="Power",
main=paste("Power Comparison for n = ", n))
lines(Mu, signed_rank_powers, col="orange")
legend("topright", legend=c("t-test", "signed-rank-test"), col=c("blue", "orange"), lty=1)
}
dat <- read_csv("..\data\podcast.csv")
?read_csv
dat <- read_csv("../data/podcast.csv")
dat <- read_csv("../data/podcast.csv", delimiter=",")
dat <- read_csv("../data/podcast.csv")
head(dat)
dat <- read_csv("../data/podcast.csv")
head(dat)
?tapply
values[, 1]
dat[, 1]
dat[, 2]
vals <- dat[, 1]
groups <- dat[, 2]
tapply(vals, groups, function(x) (mean(x) - mean(values))^2)
tapply(vals, groups, function(x) (mean(x) - mean(values))^2))
tapply(vals, groups, function(x) (mean(x) - mean(values))^2)
library(dplyr)
data %>% group_by(podcast)
data %>% group_by(podcast) %>% mean(x)
dat %>% group_by(podcast) %>% mean(x)
dat
tapply(values, groups, function(x) (mean(values) - mean(x))^2)
tapply(vals, groups, function(x) (mean(values) - mean(x))^2)
tapply(vals, groups, function(x) (mean(vals) - mean(x))^2)
mean[vals]
mean(vals)
vals
vals <- dat[, 1] %>% array()
vals
groups
groups <- groups %>% array()
tapply(vals, groups, function(x) (mean(vals) - mean(x))^2)
length(vals)
vals
vals <- vals[1]
vals
groups
length(vals)
vals[1]
length(vals[1])
length(groups)
tapply(vals, groups, function(x) (mean(vals) - mean(x))^2)
dat %>% pull(1)
vals <- dat %>% pull(1)
groups <- dat %>% pull(2)
tapply(vals, groups, function(x) (mean(vals) - mean(x))^2)
mean(vals)
dat %>% group_by(podcast) %>% mutate(tss = mean(x) - mean(vals))
dat %>% group_by(podcast)
sum(tapply(vals, groups, function(x) (mean(x) - mean(vals))^2))
dat$podcast %>% unique()
dat %>% filter(podcast == FALSE)
length(dat %>% filter(podcast == FALSE))
size(dat %>% filter(podcast == FALSE))
dat.shape
ncol(dat)
nrow(dat)
unlist(vals)
combined_sample <- dat %>% pull(1)
grand_mean <- mean(combined_sample)
groups <- dat$podcast %>% unique()
obs_tss <- 0
for (g in groups) {
group <- dat %>% filter(podcast == g)
n_j = nrow(group)
ss <- sum(n_j * (group %>% pull(1) - grand_mean))
obs_tss <- obs_tss + ss
}
obs_tss
sum(tapply(values, groups, function(x) (mean(x) - mean(values))^2))
sum(tapply(vals, groups, function(x) (mean(x) - mean(vals))^2))
vals <- dat %>% pull(1)
groups <- dat %>% pull(2)
sum(tapply(vals, groups, function(x) (mean(x) - mean(vals))^2))
obs_tss
combined_sample <- dat %>% pull(1)
grand_mean <- mean(combined_sample)
groups <- dat$podcast %>% unique()
obs_tss <- 0
for (g in groups) {
group <- dat %>% filter(podcast == g)
n_j = nrow(group)
ss <- sum(n_j * (group %>% pull(1) - grand_mean)^2)
obs_tss <- obs_tss + ss
}
bootCombinedTest <- function(dat, B = 1e4) {
combined_sample <- dat %>% pull(1)
grand_mean <- mean(combined_sample)
groups <- dat$podcast %>% unique()
obs_tss <- 0
for (g in groups) {
group <- dat %>% filter(podcast == g)
n_j = nrow(group)
ss <- n_j * (mean(group %>% pull(1)) - grand_mean)^2
obs_tss <- obs_tss + ss
}
}
bootCombinedTest <- function(dat, B = 1e4) {
combined_sample <- dat %>% pull(1)
grand_mean <- mean(combined_sample)
groups <- dat$podcast %>% unique()
obs_tss <- 0
for (g in groups) {
group <- dat %>% filter(podcast == g)
n_j = nrow(group)
ss <- n_j * (mean(group %>% pull(1)) - grand_mean)^2
obs_tss <- obs_tss + ss
}
}
combined_sample <- dat %>% pull(1)
grand_mean <- mean(combined_sample)
groups <- dat$podcast %>% unique()
obs_tss <- 0
for (g in groups) {
group <- dat %>% filter(podcast == g)
n_j = nrow(group)
ss <- n_j * (mean(group %>% pull(1)) - grand_mean)^2
obs_tss <- obs_tss + ss
}
grand_mean <- mean(dat$x)
podcast_mean <- mean(
dat %>% filter(podcast == TRUE) %>% pull(1)
)
nopodcast_mean <- mean(
dat %>% filter(podcast == FALSE) %>% pull(1)
)
(podcast_mean - grand_mean)^2 + (nopodcast_mean - grand_mean)^2
sample(dat, replace=TRUE)
sample(dat, replace=TRUE) %>% filter(podcat == TRUE)
sample(dat, replace=TRUE) %>% filter(podcast == TRUE)
sample(dat, replace=TRUE) %>% filter(podcast == TRUE)
sum(tapply(vals, groups, function(x) (mean(x) - mean(vals))^2))
groups
vals
dat %>% pull(2)
vals <- dat %>% pull(1)
groups <- dat %>% pull(2)
sum(tapply(vals, groups, function(x) length(x) * (mean(x) - grand_mean)^2))
bootCombinedTest <- function(dat, B = 1e4) {
vals <- dat %>% pull(1)
groups <- dat %>% pull(2)
obs_tss <- sum(tapply(vals, groups, function(x) length(x) * (mean(x) - grand_mean)^2))
bootstrap_stats <- numeric(B)
for (b in 1:B) {
bootstrap_sample <- sample(vals, replace=TRUE)
bootstrap_tss <- sum(tapply(bootstrap_sample, groups,
function(x) length(x) * (mean(x) - grand_mean)^2))
boostrap_stats[b] <- bootstrap_tss
}
bootstrap_p_value <- mean(bootstrap_stats >= obs_tss)
return(bootstrap_p_value)
}
bootCombinedTest(dat)
bootCombinedTest <- function(dat, B = 1e4) {
vals <- dat %>% pull(1)
groups <- dat %>% pull(2)
obs_tss <- sum(tapply(vals, groups, function(x) length(x) * (mean(x) - grand_mean)^2))
bootstrap_stats <- numeric(B)
for (b in 1:B) {
bootstrap_sample <- sample(vals, replace=TRUE)
bootstrap_tss <- sum(tapply(bootstrap_sample, groups,
function(x) length(x) * (mean(x) - grand_mean)^2))
bootstrap_stats[b] <- bootstrap_tss
}
bootstrap_p_value <- mean(bootstrap_stats >= obs_tss)
return(bootstrap_p_value)
}
bootCombinedTest(dat)
bootCombinedTest(dat)
bootCombinedTest(dat)
bootstrap_stats
vals <- dat %>% pull(1)
groups <- dat %>% pull(2)
obs_tss <- sum(tapply(vals, groups, function(x) length(x) * (mean(x) - grand_mean)^2))
bootstrap_stats <- numeric(B)
for (b in 1:B) {
bootstrap_sample <- sample(vals, replace=TRUE)
bootstrap_tss <- sum(tapply(bootstrap_sample, groups,
function(x) length(x) * (mean(x) - grand_mean)^2))
bootstrap_stats[b] <- bootstrap_tss
}
bootstrap_p_value <- mean(bootstrap_stats >= obs_tss)
bootstrap_stats
obs_tss
bootCombinedTest(dat)
N <- c(10, 20, 50, 100, 200, 500)
B <- 1e4
Mu <- seq(-3, 3, length.out=11)
sigma <- 1
alpha <- 0.1
simulate <- function(n, mu) {
t_rejects <- 0
signed_rank_rejects <- 0
for (b in 1:B) {
x <- rnorm(n, mean=mu, sd=sigma)
T <- t.test(x, alternative="two.sided", mu=0)
D <- wilcox.test(x, alternative="two.sided", mu=0)
if (T$p.value < alpha) {
t_rejects <- t_rejects + 1
}
if (D$p.value < alpha) {
signed_rank_rejects <- signed_rank_rejects + 1
}
}
t_power <- t_rejects / B
signed_rank_power <- signed_rank_rejects / B
return(c(t_power, signed_rank_power))
}
for (n in N) {
t_powers <- numeric(length(Mu))
signed_rank_powers <- numeric(length(Mu))
for (i in 1:length(Mu)) {
mu <- Mu[i]
sim <- simulate(n, mu)
t_powers[i] = sim[1]
signed_rank_powers[i] = sim[2]
}
plot(Mu, t_powers, type="l", col="blue", xlab = "mu's", ylab="Power",
main=paste("Power Comparison for n = ", n))
lines(Mu, signed_rank_powers, col="orange")
legend("bottomright", legend=c("t-test", "signed-rank-test"), col=c("blue", "orange"), lty=1)
}
bootCombinedTest <- function(dat, B = 1e4) {
vals <- dat %>% pull(1)
groups <- dat %>% pull(2)
obs_tss <- sum(tapply(vals, groups, function(x) length(x) * (mean(x) - grand_mean)^2))
bootstrap_stats <- numeric(B)
for (b in 1:B) {
bootstrap_sample <- sample(vals, replace=TRUE)
bootstrap_tss <- sum(tapply(bootstrap_sample, groups,
function(x) length(x) * (mean(x) - grand_mean)^2))
bootstrap_stats[b] <- bootstrap_tss
}
bootstrap_p_value <- sum(bootstrap_stats >= obs_tss) + 1 / B + 1
return(bootstrap_p_value)
}
bootCombinedTest(dat)
bootCombinedTest <- function(dat, B = 1e4) {
vals <- dat %>% pull(1)
groups <- dat %>% pull(2)
obs_tss <- sum(tapply(vals, groups, function(x) length(x) * (mean(x) - grand_mean)^2))
bootstrap_stats <- numeric(B)
for (b in 1:B) {
bootstrap_sample <- sample(vals, replace=TRUE)
bootstrap_tss <- sum(tapply(bootstrap_sample, groups,
function(x) length(x) * (mean(x) - grand_mean)^2))
bootstrap_stats[b] <- bootstrap_tss
}
bootstrap_p_value <- (sum(bootstrap_stats >= obs_tss) + 1) / (B + 1)
return(bootstrap_p_value)
}
bootCombinedTest(dat)
library(rmarkdown)
render(mt-1.Rmd)
render("mt-1.Rmd"")
render("mt-1.Rmd")
pwd()
?cwd
setwd(../mt)
setwd("../mt")
render("mt-1.Rmd")
render("mt-1.Rmd")
render("mt-1.Rmd")
dat <- read_csv("../data/podcast.csv")
head(dat)
?read_csv
dat <- read_csv("../data/podcast.csv", col_types=c("double", "logical"))
dat <- read_csv("../data/podcast.csv", col_types=c("numeric", "logical"))
## Midterm 1
```{r setup, echo=TRUE}
library(dplyr)
library(dplyr)
library(readr)
dat <- read_csv("../data/podcast.csv", col_types=c("numeric", "logical"))
dat <- read.csv("../data/podcast.csv", colClasses=c("numeric", "logical"))
head(dat)
render("mt-1.Rmd")
render("mt-1.Rmd")
